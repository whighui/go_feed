package realtion

/**
先自己思考
用户表：
查询个人信息  查询关注了谁 添加关注    谁关注了我  剔除黑粉
*/

/**
DDL 版本一
tiktok_user_info 用户信息表: id主键 user_id 用户信息 大V认证 头像 名称 注册时间
tiktok_relation  关系表：    id主键 关注者id 被关注者id
但是随着数据量大 用户信息上亿级别 每个人关注与粉丝成百 那么关系表就是上百亿 所以就是需要进行水平拆分

水平分表：针对数据量巨大的单张表（比如订单表），按照某种规则（RANGE,HASH取模等），切分到多张表里面去。但是这些表还是在同一个库中，所以库级别的数据库操作还是有IO瓶颈。不建议采用。
分库分表：将单张表的数据切分到多个服务器上去，每个服务器具有相应的库与表，只是表中数据集合不同。水平分库分表能够有效的缓解单机和单库的性能瓶颈和压力，突破IO、连接数、硬件资源等的瓶颈

缺点：
1. 分库分表 join  以往一次能查询出来的结果 需要进行多次查询或者join
2. 分布式事物等难点
*/
